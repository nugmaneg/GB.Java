/*
–ù—É–≥–º–∞–Ω–æ–≤ –ï–≥–æ—Ä.
–ü—Ä–æ—Å—Ç–∏—Ç–µ, —á—É—Ç—å-—á—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è GPT ü•≤
 */

package org.example.seminar6.attestation;

import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Map<String, Map<String, String>> laptops = new HashMap<>();
        addLaptop(laptops, "Laptop 1", 4, 500, "Windows 10", "Black");
        addLaptop(laptops, "Laptop 1.2", 4, 500, "Windows 10", "White");
        addLaptop(laptops, "Laptop 2", 8, 1000, "Windows 10", "Black");
        addLaptop(laptops, "Laptop 2.2", 8, 1000, "Windows 10", "White");
        addLaptop(laptops, "Laptop 3", 16, 2000, "Windows 10", "Black");
        addLaptop(laptops, "Laptop 3.2", 16, 2000, "Windows 10", "White");
        addLaptop(laptops, "Laptop 4", 32, 4000, "Windows 10", "Black");
        addLaptop(laptops, "Laptop 4.2", 32, 4000, "Windows 10", "White");

        Map<String, String> filters = getFiltersFromUser();
        filterLaptops(laptops, filters);
    }

    private static Map<String, String> getFiltersFromUser() {
        Scanner scanner = new Scanner(System.in);
        Map<String, String> filters = new HashMap<>();

        int choice;
        do {
            choice = userInput(scanner);

            switch (choice) {
                case 1:
                    System.out.print("–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –û–ó–£: ");
                    filters.put("–û–ó–£", scanner.next());
                    break;
                case 2:
                    System.out.print("–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ–±—ä–µ–º–∞ –ñ–î: ");
                    filters.put("–û–±—ä–µ–º –ñ–î", scanner.next());
                    break;
                case 3:
                    System.out.print("–í–≤–µ–¥–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É: ");
                    filters.put("–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞", scanner.next());
                    break;
                case 4:
                    System.out.print("–í–≤–µ–¥–∏—Ç–µ —Ü–≤–µ—Ç: ");
                    filters.put("–¶–≤–µ—Ç", scanner.next());
                    break;
            }

            System.out.print("–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω –∫—Ä–∏—Ç–µ—Ä–∏–π? (–¥–∞/–Ω–µ—Ç): ");
        } while ("–¥–∞".equalsIgnoreCase(scanner.next()));

        return filters;
    }

    private static int userInput(Scanner scanner) {
        System.out.print("–í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—É, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–º—É –∫—Ä–∏—Ç–µ—Ä–∏—é:\n" +
                "1 - –û–ó–£\n" +
                "2 - –û–±—ä–µ–º –ñ–î\n" +
                "3 - –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞\n" +
                "4 - –¶–≤–µ—Ç\n");
        System.out.print("\n–í–≤–æ–¥: ");
        int choice = scanner.nextInt();

        if (choice < 1 || choice > 4) {
            System.out.println("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—É –æ—Ç 1 –¥–æ 4.");
            return userInput(scanner);
        } else {
            return choice;
        }
    }

    private static void addLaptop(Map<String, Map<String, String>> laptops, String name, int ram, int hddCapacity, String operatingSystem, String color) {
        Map<String, String> laptopProperties = new HashMap<>();
        laptopProperties.put("–û–ó–£", String.valueOf(ram));
        laptopProperties.put("–û–±—ä–µ–º –ñ–î", String.valueOf(hddCapacity));
        laptopProperties.put("–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞", operatingSystem);
        laptopProperties.put("–¶–≤–µ—Ç", color);

        laptops.put(name + " - " + operatingSystem + " - " + color, laptopProperties);
    }

    private static void filterLaptops(Map<String, Map<String, String>> laptops, Map<String, String> filters) {
        boolean found = false;
        for (Map.Entry<String, Map<String, String>> entry : laptops.entrySet()) {
            String laptopName = entry.getKey();
            Map<String, String> laptopProperties = entry.getValue();

            boolean matches = true;
            for (Map.Entry<String, String> filter : filters.entrySet()) {
                String property = laptopProperties.get(filter.getKey());
                if (filter.getKey().equals("–û–ó–£") || filter.getKey().equals("–û–±—ä–µ–º –ñ–î")) {
                    if (Integer.parseInt(property) < Integer.parseInt(filter.getValue())) {
                        matches = false;
                        break;
                    }
                } else {
                    if (!property.equalsIgnoreCase(filter.getValue())) {
                        matches = false;
                        break;
                    }
                }
            }

            if (matches) {
                found = true;
                System.out.println("Laptop: " + laptopName);
                System.out.println("–û–ó–£: " + laptopProperties.get("–û–ó–£"));
                System.out.println("–û–±—ä–µ–º –ñ–î: " + laptopProperties.get("–û–±—ä–µ–º –ñ–î"));
                System.out.println("–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: " + laptopProperties.get("–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞"));
                System.out.println("–¶–≤–µ—Ç: " + laptopProperties.get("–¶–≤–µ—Ç"));
                System.out.println();
            }
        }

        if (!found) {
            System.out.println("–ù–µ—Ç –Ω–æ—É—Ç–±—É–∫–æ–≤, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º.");
        }
    }
}